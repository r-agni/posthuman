{"abi":[{"type":"function","name":"addOracleSigners","inputs":[{"name":"_oracleSigners","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"beaconStateRootAtBlockNumber","inputs":[{"name":"blockNumber","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"hasVoted","inputs":[{"name":"blockNumber","type":"uint64","internalType":"uint64"},{"name":"oracleSigner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isOracleSigner","inputs":[{"name":"_oracleSigner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"latestConfirmedOracleBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"removeOracleSigners","inputs":[{"name":"_oracleSigners","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setThreshold","inputs":[{"name":"_threshold","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stateRootVotes","inputs":[{"name":"blockNumber","type":"uint64","internalType":"uint64"},{"name":"stateRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"threshold","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalOracleSigners","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"voteForBeaconChainStateRoot","inputs":[{"name":"blockNumber","type":"uint64","internalType":"uint64"},{"name":"stateRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addOracleSigners(address[])":"30904457","beaconStateRootAtBlockNumber(uint64)":"864b8a69","hasVoted(uint64,address)":"c61ff600","isOracleSigner(address)":"7a000989","latestConfirmedOracleBlockNumber()":"2dae03e1","removeOracleSigners(address[])":"a3b2aa96","setThreshold(uint256)":"960bfe04","stateRootVotes(uint64,bytes32)":"0690526a","threshold()":"42cde4e8","totalOracleSigners()":"7d21af06","voteForBeaconChainStateRoot(uint64,bytes32)":"a22f141e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracleSigners\",\"type\":\"address[]\"}],\"name\":\"addOracleSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"beaconStateRootAtBlockNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"oracleSigner\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleSigner\",\"type\":\"address\"}],\"name\":\"isOracleSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfirmedOracleBlockNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracleSigners\",\"type\":\"address[]\"}],\"name\":\"removeOracleSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"stateRootVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOracleSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"}],\"name\":\"voteForBeaconChainStateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"addOracleSigners(address[])\":{\"details\":\"Function will have no effect on the i-th input address if `_oracleSigners[i]`is already in the set of oracle signers.\",\"params\":{\"_oracleSigners\":\"Array of address to be added to the set.\"}},\"beaconStateRootAtBlockNumber(uint64)\":{\"details\":\"This will return `bytes32(0)` if the state root at the specified blockNumber is not yet confirmed.\"},\"removeOracleSigners(address[])\":{\"details\":\"Function will have no effect on the i-th input address if `_oracleSigners[i]`is already not in the set of oracle signers.\",\"params\":{\"_oracleSigners\":\"Array of address to be removed from the set.\"}},\"setThreshold(uint256)\":{\"params\":{\"_threshold\":\"Desired new value for the `threshold` variable. Function will revert if this is set to zero.\"}},\"threshold()\":{\"details\":\"We note that there is an edge case -- when the threshold is adjusted downward, if a state root already has enough votes to meet the *new* threshold, the state root must still receive one additional vote from an oracle signer to be confirmed. This behavior is intended, to minimize unexpected root confirmations.\"},\"voteForBeaconChainStateRoot(uint64,bytes32)\":{\"details\":\"The state root will be finalized once the total number of votes *for this exact state root at this exact blockNumber* meets the `threshold` value.\",\"params\":{\"blockNumber\":\"The Beacon Chain blockNumber of interest.\",\"stateRoot\":\"The Beacon Chain state root that the caller asserts was the correct root, at the specified `blockNumber`.\"}}},\"title\":\"Interface for the BeaconStateOracle contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOracleSigners(address[])\":{\"notice\":\"Owner-only function used to add a signer to the set of oracle signers.\"},\"beaconStateRootAtBlockNumber(uint64)\":{\"notice\":\"Mapping: Beacon Chain blockNumber => the Beacon Chain state root at the specified blockNumber.\"},\"hasVoted(uint64,address)\":{\"notice\":\"Mapping: Beacon Chain blockNumber => oracle signer address => whether or not the oracle signer has voted on the state root at the blockNumber.\"},\"isOracleSigner(address)\":{\"notice\":\"Mapping: address => whether or not the address is in the set of oracle signers.\"},\"latestConfirmedOracleBlockNumber()\":{\"notice\":\"Largest blockNumber that has been confirmed by the oracle.\"},\"removeOracleSigners(address[])\":{\"notice\":\"Owner-only function used to remove a signer from the set of oracle signers.\"},\"setThreshold(uint256)\":{\"notice\":\"Owner-only function used to modify the value of the `threshold` variable.\"},\"stateRootVotes(uint64,bytes32)\":{\"notice\":\"Mapping: Beacon Chain blockNumber => state root => total number of oracle signer votes for the state root at the blockNumber. \"},\"threshold()\":{\"notice\":\"Number of oracle signers that must vote for a state root in order for the state root to be confirmed. Adjustable by this contract's owner through use of the `setThreshold` function.\"},\"totalOracleSigners()\":{\"notice\":\"Total number of members of the set of oracle signers.\"},\"voteForBeaconChainStateRoot(uint64,bytes32)\":{\"notice\":\"Called by a member of the set of oracle signers to assert that the Beacon Chain state root is `stateRoot` at `blockNumber`.\"}},\"notice\":\"DEPRECATED INTERFACE at commit hash https://github.com/Layr-Labs/eigenlayer-contracts/tree/0139d6213927c0a7812578899ddd3dda58051928Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/test/integration/deprecatedInterfaces/mainnet/IBeaconChainOracle.sol\":\"IBeaconChainOracle_DeprecatedM1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-upgrades-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\",\":zeus-templates/=lib/zeus-templates/src/\"]},\"sources\":{\"src/test/integration/deprecatedInterfaces/mainnet/IBeaconChainOracle.sol\":{\"keccak256\":\"0xcc2d46b8b202c65d6b52f33f48fa1429366be7cde5d1b874a829e1bd0435c6b1\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c56255a6aeb3a5279c1ace71038c22f61edd7be7f610adf27d389085be1ef454\",\"dweb:/ipfs/QmWEDTFQQe6A2K8s4ctFrScNnxqDsxGr24jki1LsrNFUPE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address[]","name":"_oracleSigners","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"addOracleSigners"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"}],"stateMutability":"view","type":"function","name":"beaconStateRootAtBlockNumber","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"address","name":"oracleSigner","type":"address"}],"stateMutability":"view","type":"function","name":"hasVoted","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_oracleSigner","type":"address"}],"stateMutability":"view","type":"function","name":"isOracleSigner","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"latestConfirmedOracleBlockNumber","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"address[]","name":"_oracleSigners","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"removeOracleSigners"},{"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setThreshold"},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"stateRoot","type":"bytes32"}],"stateMutability":"view","type":"function","name":"stateRootVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"threshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalOracleSigners","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint64","name":"blockNumber","type":"uint64"},{"internalType":"bytes32","name":"stateRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"voteForBeaconChainStateRoot"}],"devdoc":{"kind":"dev","methods":{"addOracleSigners(address[])":{"details":"Function will have no effect on the i-th input address if `_oracleSigners[i]`is already in the set of oracle signers.","params":{"_oracleSigners":"Array of address to be added to the set."}},"beaconStateRootAtBlockNumber(uint64)":{"details":"This will return `bytes32(0)` if the state root at the specified blockNumber is not yet confirmed."},"removeOracleSigners(address[])":{"details":"Function will have no effect on the i-th input address if `_oracleSigners[i]`is already not in the set of oracle signers.","params":{"_oracleSigners":"Array of address to be removed from the set."}},"setThreshold(uint256)":{"params":{"_threshold":"Desired new value for the `threshold` variable. Function will revert if this is set to zero."}},"threshold()":{"details":"We note that there is an edge case -- when the threshold is adjusted downward, if a state root already has enough votes to meet the *new* threshold, the state root must still receive one additional vote from an oracle signer to be confirmed. This behavior is intended, to minimize unexpected root confirmations."},"voteForBeaconChainStateRoot(uint64,bytes32)":{"details":"The state root will be finalized once the total number of votes *for this exact state root at this exact blockNumber* meets the `threshold` value.","params":{"blockNumber":"The Beacon Chain blockNumber of interest.","stateRoot":"The Beacon Chain state root that the caller asserts was the correct root, at the specified `blockNumber`."}}},"version":1},"userdoc":{"kind":"user","methods":{"addOracleSigners(address[])":{"notice":"Owner-only function used to add a signer to the set of oracle signers."},"beaconStateRootAtBlockNumber(uint64)":{"notice":"Mapping: Beacon Chain blockNumber => the Beacon Chain state root at the specified blockNumber."},"hasVoted(uint64,address)":{"notice":"Mapping: Beacon Chain blockNumber => oracle signer address => whether or not the oracle signer has voted on the state root at the blockNumber."},"isOracleSigner(address)":{"notice":"Mapping: address => whether or not the address is in the set of oracle signers."},"latestConfirmedOracleBlockNumber()":{"notice":"Largest blockNumber that has been confirmed by the oracle."},"removeOracleSigners(address[])":{"notice":"Owner-only function used to remove a signer from the set of oracle signers."},"setThreshold(uint256)":{"notice":"Owner-only function used to modify the value of the `threshold` variable."},"stateRootVotes(uint64,bytes32)":{"notice":"Mapping: Beacon Chain blockNumber => state root => total number of oracle signer votes for the state root at the blockNumber. "},"threshold()":{"notice":"Number of oracle signers that must vote for a state root in order for the state root to be confirmed. Adjustable by this contract's owner through use of the `setThreshold` function."},"totalOracleSigners()":{"notice":"Total number of members of the set of oracle signers."},"voteForBeaconChainStateRoot(uint64,bytes32)":{"notice":"Called by a member of the set of oracle signers to assert that the Beacon Chain state root is `stateRoot` at `blockNumber`."}},"version":1}},"settings":{"remappings":["@openzeppelin-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/","@openzeppelin/=lib/openzeppelin-contracts/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-upgrades-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/","openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/","zeus-templates/=lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/test/integration/deprecatedInterfaces/mainnet/IBeaconChainOracle.sol":"IBeaconChainOracle_DeprecatedM1"},"evmVersion":"london","libraries":{}},"sources":{"src/test/integration/deprecatedInterfaces/mainnet/IBeaconChainOracle.sol":{"keccak256":"0xcc2d46b8b202c65d6b52f33f48fa1429366be7cde5d1b874a829e1bd0435c6b1","urls":["bzz-raw://c56255a6aeb3a5279c1ace71038c22f61edd7be7f610adf27d389085be1ef454","dweb:/ipfs/QmWEDTFQQe6A2K8s4ctFrScNnxqDsxGr24jki1LsrNFUPE"],"license":"BUSL-1.1"}},"version":1},"id":175}