{"abi":[{"type":"function","name":"WEIGHTING_DIVISOR","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"addStrategies","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistry.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IDelegationManager"}],"stateMutability":"view"},{"type":"function","name":"deregisterOperator","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getCurrentStake","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getCurrentTotalStake","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getLatestStakeUpdate","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getMockOperatorId","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"getStakeAtBlockNumber","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getStakeAtBlockNumberAndIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getStakeHistory","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IStakeRegistry.StakeUpdate[]","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getStakeUpdateAtIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"getStakeUpdateIndexAtBlockNumber","inputs":[{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeAtBlockNumberFromIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeHistoryLength","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeIndicesAtBlockNumber","inputs":[{"name":"blockNumber","type":"uint32","internalType":"uint32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint32[]","internalType":"uint32[]"}],"stateMutability":"view"},{"type":"function","name":"getTotalStakeUpdateAtIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StakeUpdate","components":[{"name":"updateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"nextUpdateBlockNumber","type":"uint32","internalType":"uint32"},{"name":"stake","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"initializeQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"minimumStake","type":"uint96","internalType":"uint96"},{"name":"strategyParams","type":"tuple[]","internalType":"struct IStakeRegistry.StrategyParams[]","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"minimumStakeForQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"function","name":"modifyStrategyParams","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"strategyIndices","type":"uint256[]","internalType":"uint256[]"},{"name":"newMultipliers","type":"uint96[]","internalType":"uint96[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"operatorId","type":"bytes32","internalType":"bytes32"},{"name":"quorumNumbers","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint96[]","internalType":"uint96[]"},{"name":"","type":"uint96[]","internalType":"uint96[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registryCoordinator","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"removeStrategies","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"indicesToRemove","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"set_updateOperatorStakeReturnBitmap","inputs":[{"name":"newValue","type":"uint192","internalType":"uint192"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"strategyParamsByIndex","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct IStakeRegistry.StrategyParams","components":[{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"multiplier","type":"uint96","internalType":"uint96"}]}],"stateMutability":"view"},{"type":"function","name":"strategyParamsLength","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateOperatorStake","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"bytes32","internalType":"bytes32"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint192","internalType":"uint192"}],"stateMutability":"nonpayable"},{"type":"function","name":"weightOfOperatorForQuorum","inputs":[{"name":"quorumNumber","type":"uint8","internalType":"uint8"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint96","internalType":"uint96"}],"stateMutability":"view"},{"type":"event","name":"MinimumStakeForQuorumUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"minimumStake","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"OperatorStakeUpdate","inputs":[{"name":"operatorId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"quorumNumber","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"stake","type":"uint96","indexed":false,"internalType":"uint96"}],"anonymous":false},{"type":"event","name":"QuorumCreated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"StrategyAddedToQuorum","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"}],"anonymous":false},{"type":"event","name":"StrategyMultiplierUpdated","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"multiplier","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"StrategyRemovedFromQuorum","inputs":[{"name":"quorumNumber","type":"uint8","indexed":true,"internalType":"uint8"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"}],"anonymous":false}],"bytecode":{"object":"0x608060405234801561001057600080fd5b50610dad806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063ac6bfb03116100f9578063d5eccc0511610097578063f2be94ae11610071578063f2be94ae14610480578063f851e19814610498578063fa28c627146104a6578063ff694a77146104b457600080fd5b8063d5eccc051461042a578063dd9846b91461045d578063df5cf7231461037257600080fd5b8063bd29b8cd116100d3578063bd29b8cd14610418578063c46778a51461042a578063c601527d14610438578063c8294c561461044657600080fd5b8063ac6bfb03146103a5578063adc804da146103c5578063b6904b781461040557600080fd5b80634c51bf91116101665780635f1f2d77116101405780635f1f2d771461032557806366acfefe146103385780636d14a9871461037257806381c075021461038157600080fd5b80634c51bf91146102e05780635401ed27146103105780635e5a67751461031e57600080fd5b8063224a3c39116101a2578063224a3c391461023557806325504777146102965780632cd95940146102bd5780633ca5a5f5146101c957600080fd5b80630491b41c146101c95780631f9b74e0146101f057806320b662981461021e575b600080fd5b6101dd6101d736600461053a565b50600090565b6040519081526020015b60405180910390f35b6102066101fe36600461056d565b600092915050565b6040516001600160601b0390911681526020016101e7565b61023361022c3660046105ef565b5050505050565b005b6101dd61024336600461066f565b6040516bffffffffffffffffffffffff19606083901b166020820152691bdc195c985d1bdc925960b21b6034820152600090603e0160408051601f19818403018152919052805160209091012092915050565b6102af6102a4366004610769565b606080935093915050565b6040516101e7929190610805565b6102d36102cb366004610833565b606092915050565b6040516101e7919061085f565b6102336102ee3660046108d7565b600080546001600160c01b0319166001600160c01b0392909216919091179055565b6102066101fe366004610833565b60006101dd565b610233610333366004610900565b505050565b61035a610346366004610993565b6000546001600160c01b0316949350505050565b6040516001600160c01b0390911681526020016101e7565b604051600081526020016101e7565b61039861038f366004610a02565b60609392505050565b6040516101e79190610a47565b6103b86103b3366004610a85565b6104c2565b6040516101e79190610ab8565b6103d86103d3366004610aed565b6104e7565b6040805182516001600160a01b031681526020928301516001600160601b031692810192909252016101e7565b6103b8610413366004610aed565b610502565b610233610426366004610b17565b5050565b6102066101d736600461053a565b610233610426366004610c27565b610206610454366004610c6a565b60009392505050565b61046b610454366004610ca6565b60405163ffffffff90911681526020016101e7565b61020661048e366004610ce2565b6000949350505050565b6103b8610413366004610833565b610206610454366004610ca6565b610233610333366004610d24565b60408051606081018252600080825260208201819052918101919091525b9392505050565b60408051808201909152600080825260208201525b92915050565b60408051606081018252600080825260208201819052918101919091526104fc565b803560ff8116811461053557600080fd5b919050565b60006020828403121561054c57600080fd5b6104e082610524565b6001600160a01b038116811461056a57600080fd5b50565b6000806040838503121561058057600080fd5b61058983610524565b9150602083013561059981610555565b809150509250929050565b60008083601f8401126105b657600080fd5b5081356001600160401b038111156105cd57600080fd5b6020830191508360208260051b85010111156105e857600080fd5b9250929050565b60008060008060006060868803121561060757600080fd5b61061086610524565b945060208601356001600160401b038082111561062c57600080fd5b61063889838a016105a4565b9096509450604088013591508082111561065157600080fd5b5061065e888289016105a4565b969995985093965092949392505050565b60006020828403121561068157600080fd5b81356104e081610555565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156106c4576106c461068c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156106f2576106f261068c565b604052919050565b600082601f83011261070b57600080fd5b81356001600160401b038111156107245761072461068c565b610737601f8201601f19166020016106ca565b81815284602083860101111561074c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561077e57600080fd5b833561078981610555565b92506020840135915060408401356001600160401b038111156107ab57600080fd5b6107b7868287016106fa565b9150509250925092565b600081518084526020808501945080840160005b838110156107fa5781516001600160601b0316875295820195908201906001016107d5565b509495945050505050565b60408152600061081860408301856107c1565b828103602084015261082a81856107c1565b95945050505050565b6000806040838503121561084657600080fd5b8235915061085660208401610524565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108cb576108b883855163ffffffff808251168352806020830151166020840152506001600160601b0360408201511660408301525050565b928401926060929092019160010161087b565b50909695505050505050565b6000602082840312156108e957600080fd5b81356001600160c01b03811681146104e057600080fd5b60008060006040848603121561091557600080fd5b61091e84610524565b925060208401356001600160401b0381111561093957600080fd5b610945868287016105a4565b9497909650939450505050565b60008083601f84011261096457600080fd5b5081356001600160401b0381111561097b57600080fd5b6020830191508360208285010111156105e857600080fd5b600080600080606085870312156109a957600080fd5b84356109b481610555565b93506020850135925060408501356001600160401b038111156109d657600080fd5b6109e287828801610952565b95989497509550505050565b803563ffffffff8116811461053557600080fd5b600080600060408486031215610a1757600080fd5b610a20846109ee565b925060208401356001600160401b03811115610a3b57600080fd5b61094586828701610952565b6020808252825182820181905260009190848201906040850190845b818110156108cb57835163ffffffff1683529284019291840191600101610a63565b600080600060608486031215610a9a57600080fd5b610aa384610524565b95602085013595506040909401359392505050565b815163ffffffff9081168252602080840151909116908201526040808301516001600160601b031690820152606081016104fc565b60008060408385031215610b0057600080fd5b610b0983610524565b946020939093013593505050565b60008060408385031215610b2a57600080fd5b8235915060208301356001600160401b03811115610b4757600080fd5b610b53858286016106fa565b9150509250929050565b80356001600160601b038116811461053557600080fd5b600082601f830112610b8557600080fd5b813560206001600160401b03821115610ba057610ba061068c565b610bae818360051b016106ca565b82815260069290921b84018101918181019086841115610bcd57600080fd5b8286015b84811015610c1c5760408189031215610bea5760008081fd5b610bf26106a2565b8135610bfd81610555565b8152610c0a828601610b5d565b81860152835291830191604001610bd1565b509695505050505050565b60008060408385031215610c3a57600080fd5b610c4383610524565b915060208301356001600160401b03811115610c5e57600080fd5b610b5385828601610b74565b600080600060608486031215610c7f57600080fd5b610c8884610524565b9250610c96602085016109ee565b9150604084013590509250925092565b600080600060608486031215610cbb57600080fd5b83359250610ccb60208501610524565b9150610cd9604085016109ee565b90509250925092565b60008060008060808587031215610cf857600080fd5b610d0185610524565b9350610d0f602086016109ee565b93969395505050506040820135916060013590565b600080600060608486031215610d3957600080fd5b610d4284610524565b9250610d5060208501610b5d565b915060408401356001600160401b03811115610d6b57600080fd5b6107b786828701610b7456fea2646970667358221220ef6522ddd6830fba181def98a852f5beedd7bee5893faf176612e2a20f11348064736f6c634300080c0033","sourceMap":"305:10449:163:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063ac6bfb03116100f9578063d5eccc0511610097578063f2be94ae11610071578063f2be94ae14610480578063f851e19814610498578063fa28c627146104a6578063ff694a77146104b457600080fd5b8063d5eccc051461042a578063dd9846b91461045d578063df5cf7231461037257600080fd5b8063bd29b8cd116100d3578063bd29b8cd14610418578063c46778a51461042a578063c601527d14610438578063c8294c561461044657600080fd5b8063ac6bfb03146103a5578063adc804da146103c5578063b6904b781461040557600080fd5b80634c51bf91116101665780635f1f2d77116101405780635f1f2d771461032557806366acfefe146103385780636d14a9871461037257806381c075021461038157600080fd5b80634c51bf91146102e05780635401ed27146103105780635e5a67751461031e57600080fd5b8063224a3c39116101a2578063224a3c391461023557806325504777146102965780632cd95940146102bd5780633ca5a5f5146101c957600080fd5b80630491b41c146101c95780631f9b74e0146101f057806320b662981461021e575b600080fd5b6101dd6101d736600461053a565b50600090565b6040519081526020015b60405180910390f35b6102066101fe36600461056d565b600092915050565b6040516001600160601b0390911681526020016101e7565b61023361022c3660046105ef565b5050505050565b005b6101dd61024336600461066f565b6040516bffffffffffffffffffffffff19606083901b166020820152691bdc195c985d1bdc925960b21b6034820152600090603e0160408051601f19818403018152919052805160209091012092915050565b6102af6102a4366004610769565b606080935093915050565b6040516101e7929190610805565b6102d36102cb366004610833565b606092915050565b6040516101e7919061085f565b6102336102ee3660046108d7565b600080546001600160c01b0319166001600160c01b0392909216919091179055565b6102066101fe366004610833565b60006101dd565b610233610333366004610900565b505050565b61035a610346366004610993565b6000546001600160c01b0316949350505050565b6040516001600160c01b0390911681526020016101e7565b604051600081526020016101e7565b61039861038f366004610a02565b60609392505050565b6040516101e79190610a47565b6103b86103b3366004610a85565b6104c2565b6040516101e79190610ab8565b6103d86103d3366004610aed565b6104e7565b6040805182516001600160a01b031681526020928301516001600160601b031692810192909252016101e7565b6103b8610413366004610aed565b610502565b610233610426366004610b17565b5050565b6102066101d736600461053a565b610233610426366004610c27565b610206610454366004610c6a565b60009392505050565b61046b610454366004610ca6565b60405163ffffffff90911681526020016101e7565b61020661048e366004610ce2565b6000949350505050565b6103b8610413366004610833565b610206610454366004610ca6565b610233610333366004610d24565b60408051606081018252600080825260208201819052918101919091525b9392505050565b60408051808201909152600080825260208201525b92915050565b60408051606081018252600080825260208201819052918101919091526104fc565b803560ff8116811461053557600080fd5b919050565b60006020828403121561054c57600080fd5b6104e082610524565b6001600160a01b038116811461056a57600080fd5b50565b6000806040838503121561058057600080fd5b61058983610524565b9150602083013561059981610555565b809150509250929050565b60008083601f8401126105b657600080fd5b5081356001600160401b038111156105cd57600080fd5b6020830191508360208260051b85010111156105e857600080fd5b9250929050565b60008060008060006060868803121561060757600080fd5b61061086610524565b945060208601356001600160401b038082111561062c57600080fd5b61063889838a016105a4565b9096509450604088013591508082111561065157600080fd5b5061065e888289016105a4565b969995985093965092949392505050565b60006020828403121561068157600080fd5b81356104e081610555565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156106c4576106c461068c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156106f2576106f261068c565b604052919050565b600082601f83011261070b57600080fd5b81356001600160401b038111156107245761072461068c565b610737601f8201601f19166020016106ca565b81815284602083860101111561074c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561077e57600080fd5b833561078981610555565b92506020840135915060408401356001600160401b038111156107ab57600080fd5b6107b7868287016106fa565b9150509250925092565b600081518084526020808501945080840160005b838110156107fa5781516001600160601b0316875295820195908201906001016107d5565b509495945050505050565b60408152600061081860408301856107c1565b828103602084015261082a81856107c1565b95945050505050565b6000806040838503121561084657600080fd5b8235915061085660208401610524565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108cb576108b883855163ffffffff808251168352806020830151166020840152506001600160601b0360408201511660408301525050565b928401926060929092019160010161087b565b50909695505050505050565b6000602082840312156108e957600080fd5b81356001600160c01b03811681146104e057600080fd5b60008060006040848603121561091557600080fd5b61091e84610524565b925060208401356001600160401b0381111561093957600080fd5b610945868287016105a4565b9497909650939450505050565b60008083601f84011261096457600080fd5b5081356001600160401b0381111561097b57600080fd5b6020830191508360208285010111156105e857600080fd5b600080600080606085870312156109a957600080fd5b84356109b481610555565b93506020850135925060408501356001600160401b038111156109d657600080fd5b6109e287828801610952565b95989497509550505050565b803563ffffffff8116811461053557600080fd5b600080600060408486031215610a1757600080fd5b610a20846109ee565b925060208401356001600160401b03811115610a3b57600080fd5b61094586828701610952565b6020808252825182820181905260009190848201906040850190845b818110156108cb57835163ffffffff1683529284019291840191600101610a63565b600080600060608486031215610a9a57600080fd5b610aa384610524565b95602085013595506040909401359392505050565b815163ffffffff9081168252602080840151909116908201526040808301516001600160601b031690820152606081016104fc565b60008060408385031215610b0057600080fd5b610b0983610524565b946020939093013593505050565b60008060408385031215610b2a57600080fd5b8235915060208301356001600160401b03811115610b4757600080fd5b610b53858286016106fa565b9150509250929050565b80356001600160601b038116811461053557600080fd5b600082601f830112610b8557600080fd5b813560206001600160401b03821115610ba057610ba061068c565b610bae818360051b016106ca565b82815260069290921b84018101918181019086841115610bcd57600080fd5b8286015b84811015610c1c5760408189031215610bea5760008081fd5b610bf26106a2565b8135610bfd81610555565b8152610c0a828601610b5d565b81860152835291830191604001610bd1565b509695505050505050565b60008060408385031215610c3a57600080fd5b610c4383610524565b915060208301356001600160401b03811115610c5e57600080fd5b610b5385828601610b74565b600080600060608486031215610c7f57600080fd5b610c8884610524565b9250610c96602085016109ee565b9150604084013590509250925092565b600080600060608486031215610cbb57600080fd5b83359250610ccb60208501610524565b9150610cd9604085016109ee565b90509250925092565b60008060008060808587031215610cf857600080fd5b610d0185610524565b9350610d0f602086016109ee565b93969395505050506040820135916060013590565b600080600060608486031215610d3957600080fd5b610d4284610524565b9250610d5060208501610b5d565b915060408401356001600160401b03811115610d6b57600080fd5b6107b786828701610b7456fea2646970667358221220ef6522ddd6830fba181def98a852f5beedd7bee5893faf176612e2a20f11348064736f6c634300080c0033","sourceMap":"305:10449:163:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5478:90;;;;;;:::i;:::-;-1:-1:-1;5557:7:163;;5478:90;;;;508:25:194;;;496:2;481:18;5478:90:163;;;;;;;;5010:106;;;;;;:::i;:::-;5106:6;5010:106;;;;;;;;-1:-1:-1;;;;;1164:39:194;;;1146:58;;1134:2;1119:18;5010:106:163;1002:208:194;3929:161:163;;;;;;:::i;:::-;;;;;;;;;10583:169;;;;;;:::i;:::-;10702:40;;-1:-1:-1;;15923:2:194;15919:15;;;15915:53;10702:40:163;;;15903:66:194;-1:-1:-1;;;15985:12:194;;;15978:34;10650:7:163;;16028:12:194;;10702:40:163;;;-1:-1:-1;;10702:40:163;;;;;;;;;10692:51;;10702:40;10692:51;;;;;10583:169;-1:-1:-1;;10583:169:163;1494:178;;;;;;:::i;:::-;1636:15;1653;1494:178;;;;;;;;;;;;;;;:::i;5360:112::-;;;;;;:::i;:::-;5448:20;5360:112;;;;;;;;;;;;:::i;470:131::-;;;;;;:::i;:::-;552:31;:42;;-1:-1:-1;;;;;;552:42:163;-1:-1:-1;;;;;552:42:163;;;;;;;;;;470:131;9456:98;;;;;;:::i;4169:63::-;4221:7;4169:63;;3427:93;;;;;;:::i;:::-;;;;;10354:223;;;;;;:::i;:::-;10513:7;10539:31;-1:-1:-1;;;;;10539:31:163;10354:223;;;;;;;;;;-1:-1:-1;;;;;8747:32:194;;;8729:51;;8717:2;8702:18;10354:223:163;8583:203:194;607:65:163;;;4221:7;8937:51:194;;8925:2;8910:18;607:65:163;8791:203:194;6410:134:163;;;;;;:::i;:::-;6525:15;6410:134;;;;;;;;;;;;;:::i;6990:155::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4645:136::-;;;;;;:::i;:::-;;:::i;:::-;;;;11382:13:194;;-1:-1:-1;;;;;11378:39:194;11360:58;;11478:4;11466:17;;;11460:24;-1:-1:-1;;;;;11456:57:194;11434:20;;;11427:87;;;;11333:18;4645:136:163;11148:372:194;5889:116:163;;;;;;:::i;:::-;;:::i;2443:87::-;;;;;;:::i;:::-;;;;4439:84;;;;;;:::i;2896:116::-;;;;;;:::i;9105:133::-;;;;;;:::i;:::-;9228:6;9105:133;;;;;;6129:159;;;;;;:::i;:::-;;;14477:10:194;14465:23;;;14447:42;;14435:2;14420:18;6129:159:163;14303:192:194;8286:171:163;;;;;;:::i;:::-;8447:6;8286:171;;;;;;;7396:115;;;;;;:::i;9669:147::-;;;;;;:::i;2677:118::-;;;;;;:::i;6990:155::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;7123:18:163;6990:155;;;;;:::o;4645:136::-;-1:-1:-1;;;;;;;;;;;;;;;;;4756:21:163;4645:136;;;;:::o;5889:116::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;5983:18:163;-1:-1:-1;14:156:194;80:20;;140:4;129:16;;119:27;;109:55;;160:1;157;150:12;109:55;14:156;;;:::o;175:182::-;232:6;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;324:27;341:9;324:27;:::i;544:131::-;-1:-1:-1;;;;;619:31:194;;609:42;;599:70;;665:1;662;655:12;599:70;544:131;:::o;680:317::-;746:6;754;807:2;795:9;786:7;782:23;778:32;775:52;;;823:1;820;813:12;775:52;846:27;863:9;846:27;:::i;:::-;836:37;;923:2;912:9;908:18;895:32;936:31;961:5;936:31;:::i;:::-;986:5;976:15;;;680:317;;;;;:::o;1215:367::-;1278:8;1288:6;1342:3;1335:4;1327:6;1323:17;1319:27;1309:55;;1360:1;1357;1350:12;1309:55;-1:-1:-1;1383:20:194;;-1:-1:-1;;;;;1415:30:194;;1412:50;;;1458:1;1455;1448:12;1412:50;1495:4;1487:6;1483:17;1471:29;;1555:3;1548:4;1538:6;1535:1;1531:14;1523:6;1519:27;1515:38;1512:47;1509:67;;;1572:1;1569;1562:12;1509:67;1215:367;;;;;:::o;1587:842::-;1715:6;1723;1731;1739;1747;1800:2;1788:9;1779:7;1775:23;1771:32;1768:52;;;1816:1;1813;1806:12;1768:52;1839:27;1856:9;1839:27;:::i;:::-;1829:37;;1917:2;1906:9;1902:18;1889:32;-1:-1:-1;;;;;1981:2:194;1973:6;1970:14;1967:34;;;1997:1;1994;1987:12;1967:34;2036:70;2098:7;2089:6;2078:9;2074:22;2036:70;:::i;:::-;2125:8;;-1:-1:-1;2010:96:194;-1:-1:-1;2213:2:194;2198:18;;2185:32;;-1:-1:-1;2229:16:194;;;2226:36;;;2258:1;2255;2248:12;2226:36;;2297:72;2361:7;2350:8;2339:9;2335:24;2297:72;:::i;:::-;1587:842;;;;-1:-1:-1;1587:842:194;;-1:-1:-1;2388:8:194;;2271:98;1587:842;-1:-1:-1;;;1587:842:194:o;2434:247::-;2493:6;2546:2;2534:9;2525:7;2521:23;2517:32;2514:52;;;2562:1;2559;2552:12;2514:52;2601:9;2588:23;2620:31;2645:5;2620:31;:::i;2868:127::-;2929:10;2924:3;2920:20;2917:1;2910:31;2960:4;2957:1;2950:15;2984:4;2981:1;2974:15;3000:257;3072:4;3066:11;;;3104:17;;-1:-1:-1;;;;;3136:34:194;;3172:22;;;3133:62;3130:88;;;3198:18;;:::i;:::-;3234:4;3227:24;3000:257;:::o;3262:275::-;3333:2;3327:9;3398:2;3379:13;;-1:-1:-1;;3375:27:194;3363:40;;-1:-1:-1;;;;;3418:34:194;;3454:22;;;3415:62;3412:88;;;3480:18;;:::i;:::-;3516:2;3509:22;3262:275;;-1:-1:-1;3262:275:194:o;3542:530::-;3584:5;3637:3;3630:4;3622:6;3618:17;3614:27;3604:55;;3655:1;3652;3645:12;3604:55;3691:6;3678:20;-1:-1:-1;;;;;3713:2:194;3710:26;3707:52;;;3739:18;;:::i;:::-;3783:55;3826:2;3807:13;;-1:-1:-1;;3803:27:194;3832:4;3799:38;3783:55;:::i;:::-;3863:2;3854:7;3847:19;3909:3;3902:4;3897:2;3889:6;3885:15;3881:26;3878:35;3875:55;;;3926:1;3923;3916:12;3875:55;3991:2;3984:4;3976:6;3972:17;3965:4;3956:7;3952:18;3939:55;4039:1;4014:16;;;4032:4;4010:27;4003:38;;;;4018:7;3542:530;-1:-1:-1;;;3542:530:194:o;4077:523::-;4163:6;4171;4179;4232:2;4220:9;4211:7;4207:23;4203:32;4200:52;;;4248:1;4245;4238:12;4200:52;4287:9;4274:23;4306:31;4331:5;4306:31;:::i;:::-;4356:5;-1:-1:-1;4408:2:194;4393:18;;4380:32;;-1:-1:-1;4463:2:194;4448:18;;4435:32;-1:-1:-1;;;;;4479:30:194;;4476:50;;;4522:1;4519;4512:12;4476:50;4545:49;4586:7;4577:6;4566:9;4562:22;4545:49;:::i;:::-;4535:59;;;4077:523;;;;;:::o;4605:467::-;4657:3;4695:5;4689:12;4722:6;4717:3;4710:19;4748:4;4777:2;4772:3;4768:12;4761:19;;4814:2;4807:5;4803:14;4835:1;4845:202;4859:6;4856:1;4853:13;4845:202;;;4924:13;;-1:-1:-1;;;;;4920:46:194;4908:59;;4987:12;;;;5022:15;;;;4881:1;4874:9;4845:202;;;-1:-1:-1;5063:3:194;;4605:467;-1:-1:-1;;;;;4605:467:194:o;5077:459::-;5330:2;5319:9;5312:21;5293:4;5356:55;5407:2;5396:9;5392:18;5384:6;5356:55;:::i;:::-;5459:9;5451:6;5447:22;5442:2;5431:9;5427:18;5420:50;5487:43;5523:6;5515;5487:43;:::i;:::-;5479:51;5077:459;-1:-1:-1;;;;;5077:459:194:o;5541:250::-;5607:6;5615;5668:2;5656:9;5647:7;5643:23;5639:32;5636:52;;;5684:1;5681;5674:12;5636:52;5720:9;5707:23;5697:33;;5749:36;5781:2;5770:9;5766:18;5749:36;:::i;:::-;5739:46;;5541:250;;;;;:::o;6089:717::-;6320:2;6372:21;;;6442:13;;6345:18;;;6464:22;;;6291:4;;6320:2;6543:15;;;;6517:2;6502:18;;;6291:4;6586:194;6600:6;6597:1;6594:13;6586:194;;;6649:49;6694:3;6685:6;6679:13;5871:10;5920:2;5912:5;5906:12;5902:21;5897:3;5890:34;5985:2;5977:4;5970:5;5966:16;5960:23;5956:32;5949:4;5944:3;5940:14;5933:56;;-1:-1:-1;;;;;6042:4:194;6035:5;6031:16;6025:23;6021:56;6014:4;6009:3;6005:14;5998:80;5796:288;;;6649:49;6755:15;;;;6727:4;6718:14;;;;;6622:1;6615:9;6586:194;;;-1:-1:-1;6797:3:194;;6089:717;-1:-1:-1;;;;;;6089:717:194:o;6811:286::-;6870:6;6923:2;6911:9;6902:7;6898:23;6894:32;6891:52;;;6939:1;6936;6929:12;6891:52;6965:23;;-1:-1:-1;;;;;7017:31:194;;7007:42;;6997:70;;7063:1;7060;7053:12;7102:507;7195:6;7203;7211;7264:2;7252:9;7243:7;7239:23;7235:32;7232:52;;;7280:1;7277;7270:12;7232:52;7303:27;7320:9;7303:27;:::i;:::-;7293:37;;7381:2;7370:9;7366:18;7353:32;-1:-1:-1;;;;;7400:6:194;7397:30;7394:50;;;7440:1;7437;7430:12;7394:50;7479:70;7541:7;7532:6;7521:9;7517:22;7479:70;:::i;:::-;7102:507;;7568:8;;-1:-1:-1;7453:96:194;;-1:-1:-1;;;;7102:507:194:o;7614:347::-;7665:8;7675:6;7729:3;7722:4;7714:6;7710:17;7706:27;7696:55;;7747:1;7744;7737:12;7696:55;-1:-1:-1;7770:20:194;;-1:-1:-1;;;;;7802:30:194;;7799:50;;;7845:1;7842;7835:12;7799:50;7882:4;7874:6;7870:17;7858:29;;7934:3;7927:4;7918:6;7910;7906:19;7902:30;7899:39;7896:59;;;7951:1;7948;7941:12;7966:612;8054:6;8062;8070;8078;8131:2;8119:9;8110:7;8106:23;8102:32;8099:52;;;8147:1;8144;8137:12;8099:52;8186:9;8173:23;8205:31;8230:5;8205:31;:::i;:::-;8255:5;-1:-1:-1;8307:2:194;8292:18;;8279:32;;-1:-1:-1;8362:2:194;8347:18;;8334:32;-1:-1:-1;;;;;8378:30:194;;8375:50;;;8421:1;8418;8411:12;8375:50;8460:58;8510:7;8501:6;8490:9;8486:22;8460:58;:::i;:::-;7966:612;;;;-1:-1:-1;8537:8:194;-1:-1:-1;;;;7966:612:194:o;8999:163::-;9066:20;;9126:10;9115:22;;9105:33;;9095:61;;9152:1;9149;9142:12;9167:481;9245:6;9253;9261;9314:2;9302:9;9293:7;9289:23;9285:32;9282:52;;;9330:1;9327;9320:12;9282:52;9353:28;9371:9;9353:28;:::i;:::-;9343:38;;9432:2;9421:9;9417:18;9404:32;-1:-1:-1;;;;;9451:6:194;9448:30;9445:50;;;9491:1;9488;9481:12;9445:50;9530:58;9580:7;9571:6;9560:9;9556:22;9530:58;:::i;9653:647::-;9822:2;9874:21;;;9944:13;;9847:18;;;9966:22;;;9793:4;;9822:2;10045:15;;;;10019:2;10004:18;;;9793:4;10088:186;10102:6;10099:1;10096:13;10088:186;;;10167:13;;10182:10;10163:30;10151:43;;10249:15;;;;10214:12;;;;10124:1;10117:9;10088:186;;10305:318;10380:6;10388;10396;10449:2;10437:9;10428:7;10424:23;10420:32;10417:52;;;10465:1;10462;10455:12;10417:52;10488:27;10505:9;10488:27;:::i;:::-;10478:37;10562:2;10547:18;;10534:32;;-1:-1:-1;10613:2:194;10598:18;;;10585:32;;10305:318;-1:-1:-1;;;10305:318:194:o;10628:260::-;5906:12;;5871:10;5902:21;;;5890:34;;5977:4;5966:16;;;5960:23;5956:32;;;5940:14;;;5933:56;6042:4;6031:16;;;6025:23;-1:-1:-1;;;;;6021:56:194;6005:14;;;5998:80;10822:2;10807:18;;10834:48;5796:288;10893:250;10959:6;10967;11020:2;11008:9;10999:7;10995:23;10991:32;10988:52;;;11036:1;11033;11026:12;10988:52;11059:27;11076:9;11059:27;:::i;:::-;11049:37;11133:2;11118:18;;;;11105:32;;-1:-1:-1;;;10893:250:194:o;11525:388::-;11602:6;11610;11663:2;11651:9;11642:7;11638:23;11634:32;11631:52;;;11679:1;11676;11669:12;11631:52;11715:9;11702:23;11692:33;;11776:2;11765:9;11761:18;11748:32;-1:-1:-1;;;;;11795:6:194;11792:30;11789:50;;;11835:1;11832;11825:12;11789:50;11858:49;11899:7;11890:6;11879:9;11875:22;11858:49;:::i;:::-;11848:59;;;11525:388;;;;;:::o;11918:179::-;11985:20;;-1:-1:-1;;;;;12034:38:194;;12024:49;;12014:77;;12087:1;12084;12077:12;12102:1072;12170:5;12223:3;12216:4;12208:6;12204:17;12200:27;12190:55;;12241:1;12238;12231:12;12190:55;12277:6;12264:20;12303:4;-1:-1:-1;;;;;12322:2:194;12319:26;12316:52;;;12348:18;;:::i;:::-;12388:36;12420:2;12415;12412:1;12408:10;12404:19;12388:36;:::i;:::-;12458:15;;;12544:1;12540:10;;;;12528:23;;12524:32;;;12489:12;;;;12568:15;;;12565:35;;;12596:1;12593;12586:12;12565:35;12632:2;12624:6;12620:15;12644:501;12660:6;12655:3;12652:15;12644:501;;;12738:4;12732:3;12727;12723:13;12719:24;12716:114;;;12784:1;12813:2;12809;12802:14;12716:114;12856:22;;:::i;:::-;12919:3;12906:17;12936:33;12961:7;12936:33;:::i;:::-;12982:22;;13040:31;13058:12;;;13040:31;:::i;:::-;13024:14;;;13017:55;13085:18;;13123:12;;;;12686:4;12677:14;12644:501;;;-1:-1:-1;13163:5:194;12102:1072;-1:-1:-1;;;;;;12102:1072:194:o;13179:465::-;13303:6;13311;13364:2;13352:9;13343:7;13339:23;13335:32;13332:52;;;13380:1;13377;13370:12;13332:52;13403:27;13420:9;13403:27;:::i;:::-;13393:37;;13481:2;13470:9;13466:18;13453:32;-1:-1:-1;;;;;13500:6:194;13497:30;13494:50;;;13540:1;13537;13530:12;13494:50;13563:75;13630:7;13621:6;13610:9;13606:22;13563:75;:::i;13649:322::-;13723:6;13731;13739;13792:2;13780:9;13771:7;13767:23;13763:32;13760:52;;;13808:1;13805;13798:12;13760:52;13831:27;13848:9;13831:27;:::i;:::-;13821:37;;13877;13910:2;13899:9;13895:18;13877:37;:::i;:::-;13867:47;;13961:2;13950:9;13946:18;13933:32;13923:42;;13649:322;;;;;:::o;13976:::-;14050:6;14058;14066;14119:2;14107:9;14098:7;14094:23;14090:32;14087:52;;;14135:1;14132;14125:12;14087:52;14171:9;14158:23;14148:33;;14200:36;14232:2;14221:9;14217:18;14200:36;:::i;:::-;14190:46;;14255:37;14288:2;14277:9;14273:18;14255:37;:::i;:::-;14245:47;;13976:322;;;;;:::o;14735:391::-;14818:6;14826;14834;14842;14895:3;14883:9;14874:7;14870:23;14866:33;14863:53;;;14912:1;14909;14902:12;14863:53;14935:27;14952:9;14935:27;:::i;:::-;14925:37;;14981;15014:2;15003:9;14999:18;14981:37;:::i;:::-;14735:391;;14971:47;;-1:-1:-1;;;;15065:2:194;15050:18;;15037:32;;15116:2;15101:18;15088:32;;14735:391::o;15131:537::-;15263:6;15271;15279;15332:2;15320:9;15311:7;15307:23;15303:32;15300:52;;;15348:1;15345;15338:12;15300:52;15371:27;15388:9;15371:27;:::i;:::-;15361:37;;15417;15450:2;15439:9;15435:18;15417:37;:::i;:::-;15407:47;;15505:2;15494:9;15490:18;15477:32;-1:-1:-1;;;;;15524:6:194;15521:30;15518:50;;;15564:1;15561;15554:12;15518:50;15587:75;15654:7;15645:6;15634:9;15630:22;15587:75;:::i","linkReferences":{}},"methodIdentifiers":{"WEIGHTING_DIVISOR()":"5e5a6775","addStrategies(uint8,(address,uint96)[])":"c601527d","delegation()":"df5cf723","deregisterOperator(bytes32,bytes)":"bd29b8cd","getCurrentStake(bytes32,uint8)":"5401ed27","getCurrentTotalStake(uint8)":"d5eccc05","getLatestStakeUpdate(bytes32,uint8)":"f851e198","getMockOperatorId(address)":"224a3c39","getStakeAtBlockNumber(bytes32,uint8,uint32)":"fa28c627","getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)":"f2be94ae","getStakeHistory(bytes32,uint8)":"2cd95940","getStakeUpdateAtIndex(uint8,bytes32,uint256)":"ac6bfb03","getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)":"dd9846b9","getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)":"c8294c56","getTotalStakeHistoryLength(uint8)":"0491b41c","getTotalStakeIndicesAtBlockNumber(uint32,bytes)":"81c07502","getTotalStakeUpdateAtIndex(uint8,uint256)":"b6904b78","initializeQuorum(uint8,uint96,(address,uint96)[])":"ff694a77","minimumStakeForQuorum(uint8)":"c46778a5","modifyStrategyParams(uint8,uint256[],uint96[])":"20b66298","registerOperator(address,bytes32,bytes)":"25504777","registryCoordinator()":"6d14a987","removeStrategies(uint8,uint256[])":"5f1f2d77","set_updateOperatorStakeReturnBitmap(uint192)":"4c51bf91","strategyParamsByIndex(uint8,uint256)":"adc804da","strategyParamsLength(uint8)":"3ca5a5f5","updateOperatorStake(address,bytes32,bytes)":"66acfefe","weightOfOperatorForQuorum(uint8,address)":"1f9b74e0"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeForQuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"name\":\"OperatorStakeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"StrategyMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromQuorum\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEIGHTING_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentTotalStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getLatestStakeUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getMockOperatorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeAtBlockNumberAndIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getStakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getTotalStakeHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"initializeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"minimumStakeForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"newMultipliers\",\"type\":\"uint96[]\"}],\"name\":\"modifyStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"indicesToRemove\",\"type\":\"uint256[]\"}],\"name\":\"removeStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"newValue\",\"type\":\"uint192\"}],\"name\":\"set_updateOperatorStakeReturnBitmap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"strategyParamsByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"strategyParamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"updateOperatorStake\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"weightOfOperatorForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"deregisterOperator(bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\",\"params\":{\"operatorId\":\"The id of the operator to deregister.\",\"quorumNumbers\":\"The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\"}},\"getCurrentStake(bytes32,uint8)\":{\"details\":\"Function returns weight of **0** in the event that the operator has no stake history\"},\"getCurrentTotalStake(uint8)\":{\"details\":\"Will revert if `_totalStakeHistory[quorumNumber]` is empty.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"details\":\"Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeHistory(bytes32,uint8)\":{\"params\":{\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.\",\"params\":{\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"params\":{\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"params\":{\"newMultipliers\":\"are the new multipliers for the strategies\",\"quorumNumber\":\"is the quorum number to change the strategy for\",\"strategyIndices\":\"are the indices of the strategies to change\"}},\"registerOperator(address,bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered\",\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorId\":\"The id of the operator to register.\",\"quorumNumbers\":\"The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\"},\"returns\":{\"_0\":\"The operator's current stake for each quorum, and the total stake for each quorum\"}},\"removeStrategies(uint8,uint256[])\":{\"details\":\"higher indices should be *first* in the list of @param indicesToRemove, since otherwise the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\",\"params\":{\"quorumNumber\":\".\"}},\"weightOfOperatorForQuorum(uint8,address)\":{\"details\":\"reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\"}},\"title\":\"Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\",\"version\":1},\"userdoc\":{\"events\":{\"MinimumStakeForQuorumUpdated(uint8,uint96)\":{\"notice\":\"emitted when the minimum stake for a quorum is updated\"},\"OperatorStakeUpdate(bytes32,uint8,uint96)\":{\"notice\":\"emitted whenever the stake of `operator` is updated\"},\"QuorumCreated(uint8)\":{\"notice\":\"emitted when a new quorum is created\"},\"StrategyAddedToQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\"},\"StrategyMultiplierUpdated(uint8,address,uint256)\":{\"notice\":\"emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\"},\"StrategyRemovedFromQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\"}},\"kind\":\"user\",\"methods\":{\"WEIGHTING_DIVISOR()\":{\"notice\":\"Constant used as a divisor in calculating weights.\"},\"addStrategies(uint8,(address,uint96)[])\":{\"notice\":\"Adds new strategies and the associated multipliers to the @param quorumNumber.\"},\"delegation()\":{\"notice\":\"Returns the EigenLayer delegation manager contract.\"},\"deregisterOperator(bytes32,bytes)\":{\"notice\":\"Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\"},\"getCurrentStake(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\"},\"getCurrentTotalStake(uint8)\":{\"notice\":\"Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for a certain quorum\"},\"getStakeAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"notice\":\"Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry  corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\"},\"getStakeHistory(bytes32,uint8)\":{\"notice\":\"Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"notice\":\"Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\"},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"notice\":\"Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the  `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`.  Reverts otherwise.\"},\"getTotalStakeIndicesAtBlockNumber(uint32,bytes)\":{\"notice\":\"Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\"},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"notice\":\"Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\"},\"initializeQuorum(uint8,uint96,(address,uint96)[])\":{\"notice\":\"Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\"},\"minimumStakeForQuorum(uint8)\":{\"notice\":\"In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\"},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"notice\":\"This function is used for modifying the weights of strategies that are already in the mapping strategiesConsideredAndMultipliers for a specific\"},\"registerOperator(address,bytes32,bytes)\":{\"notice\":\"Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\"},\"removeStrategies(uint8,uint256[])\":{\"notice\":\"This function is used for removing strategies and their associated weights from the\"},\"strategyParamsByIndex(uint8,uint256)\":{\"notice\":\"Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\"},\"strategyParamsLength(uint8)\":{\"notice\":\"Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\"},\"updateOperatorStake(address,bytes32,bytes)\":{\"notice\":\"Called by the registry coordinator to update an operator's stake for one or more quorums. If the operator no longer has the minimum stake required for a quorum, they are added to the\"},\"weightOfOperatorForQuorum(uint8,address)\":{\"notice\":\"This function computes the total weight of the @param operator in the quorum @param quorumNumber.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/StakeRegistryMock.sol\":\"StakeRegistryMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-contracts/\",\":erc4626-tests/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\"]},\"sources\":{\"lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0x5a7dd74fb8a9334aa50c497a58875159aec17e905a7daaf3c276936d5b691bd1\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a25b8d80233016a4634b9217a0899f43f18bfb21abb046bee4403e9408296009\",\"dweb:/ipfs/QmUA3bTzddiHnPxBqYtovxvcVvCkNrAxPJ7xcskocxEq5P\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b\",\"dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH\"]},\"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e\",\"dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"src/interfaces/IBLSApkRegistry.sol\":{\"keccak256\":\"0xc07a5edfd95ab4f16f16a8dc8e76eadf4b0e90fe49db90540d01daaad86898c5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://52b53266450a53da641e82d8ae3be93c5e09f8342b4ea0cc96bb9038d8406354\",\"dweb:/ipfs/QmVuoiQyqPTLCGnyt8zDaxiyaj4ETdgTGKv4MDHWzqEDjp\"]},\"src/interfaces/IIndexRegistry.sol\":{\"keccak256\":\"0x83b2d56aacf27e65c4959a832c5de573e013908c044f6e48ea8284ac5282ae2b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://877af382587e96bb39bcc6db8bb5e4b871db5025c52347d4bee9afeaa4a6cc8d\",\"dweb:/ipfs/QmdnhsQCChzq2o5NgbeT3JxSsEcMm1PC9QW6zenZNPjD9F\"]},\"src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"src/interfaces/IRegistryCoordinator.sol\":{\"keccak256\":\"0xdd8effb082c1d5957d5ff43d7c59497b32866a6d82bcc7d5efa49ea9bc9b3385\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cb33a2a1446585b13b7a509e880c60d658d2d2522ec48a9f02e30d2cff54002d\",\"dweb:/ipfs/QmVNG8ZPZkXzNEadPdTj1uBYLiZdCnYfsE5iGU6nJcJXiD\"]},\"src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0x1b8b4d757c1b804bc4cf6fbbf8bf8f89ebdeb30a31014751fe7d01deb9d513d4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://984bf2777b898ed187d28997f9783f5c293a1a1848e3e9aa470ce9183d454c97\",\"dweb:/ipfs/Qme3aTpBrkLu8wYHFMZbCfhXHoZ1M6SpXkeC237T9BuU5B\"]},\"src/libraries/BN254.sol\":{\"keccak256\":\"0xb428c8d0c3b325507a88a61a80115493eb88606ccc19ed64a31e11294ab853b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7b6fb935bfe0494e6ff970c8f30a86d5f4cf5c3e0967300c28cd383c043acae\",\"dweb:/ipfs/QmUHfFZaVjLPXhkBmcxrZhAHZaSFQDqXtrLGpjGBQBa5Ki\"]},\"test/mocks/StakeRegistryMock.sol\":{\"keccak256\":\"0x7e6641dceef1f8b564d80e01930a9a51ac78711bc2c0a1628bd56e99c7b193be\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://7b473cf6c9895888069b045e204cd12bc31c1c750e9ae270bc02b379597050d1\",\"dweb:/ipfs/QmcLg6DKHs8QU5kp6H6xFnH35URFPD8S3z5ZoY9mWEWZHh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.12+commit.f00d7308"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"uint96","name":"minimumStake","type":"uint96","indexed":false}],"type":"event","name":"MinimumStakeForQuorumUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32","indexed":true},{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":false},{"internalType":"uint96","name":"stake","type":"uint96","indexed":false}],"type":"event","name":"OperatorStakeUpdate","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true}],"type":"event","name":"QuorumCreated","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false}],"type":"event","name":"StrategyAddedToQuorum","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false},{"internalType":"uint256","name":"multiplier","type":"uint256","indexed":false}],"type":"event","name":"StrategyMultiplierUpdated","anonymous":false},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8","indexed":true},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false}],"type":"event","name":"StrategyRemovedFromQuorum","anonymous":false},{"inputs":[],"stateMutability":"pure","type":"function","name":"WEIGHTING_DIVISOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"struct IStakeRegistry.StrategyParams[]","name":"strategyParams","type":"tuple[]","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}]}],"stateMutability":"nonpayable","type":"function","name":"addStrategies"},{"inputs":[],"stateMutability":"view","type":"function","name":"delegation","outputs":[{"internalType":"contract IDelegationManager","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"deregisterOperator"},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getCurrentStake","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getCurrentTotalStake","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getLatestStakeUpdate","outputs":[{"internalType":"struct IStakeRegistry.StakeUpdate","name":"","type":"tuple","components":[{"internalType":"uint32","name":"updateBlockNumber","type":"uint32"},{"internalType":"uint32","name":"nextUpdateBlockNumber","type":"uint32"},{"internalType":"uint96","name":"stake","type":"uint96"}]}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"pure","type":"function","name":"getMockOperatorId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint32","name":"blockNumber","type":"uint32"}],"stateMutability":"view","type":"function","name":"getStakeAtBlockNumber","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint32","name":"blockNumber","type":"uint32"},{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getStakeAtBlockNumberAndIndex","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getStakeHistory","outputs":[{"internalType":"struct IStakeRegistry.StakeUpdate[]","name":"","type":"tuple[]","components":[{"internalType":"uint32","name":"updateBlockNumber","type":"uint32"},{"internalType":"uint32","name":"nextUpdateBlockNumber","type":"uint32"},{"internalType":"uint96","name":"stake","type":"uint96"}]}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getStakeUpdateAtIndex","outputs":[{"internalType":"struct IStakeRegistry.StakeUpdate","name":"","type":"tuple","components":[{"internalType":"uint32","name":"updateBlockNumber","type":"uint32"},{"internalType":"uint32","name":"nextUpdateBlockNumber","type":"uint32"},{"internalType":"uint96","name":"stake","type":"uint96"}]}]},{"inputs":[{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint32","name":"blockNumber","type":"uint32"}],"stateMutability":"view","type":"function","name":"getStakeUpdateIndexAtBlockNumber","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint32","name":"blockNumber","type":"uint32"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getTotalStakeAtBlockNumberFromIndex","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"getTotalStakeHistoryLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint32","name":"blockNumber","type":"uint32"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"}],"stateMutability":"view","type":"function","name":"getTotalStakeIndicesAtBlockNumber","outputs":[{"internalType":"uint32[]","name":"","type":"uint32[]"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getTotalStakeUpdateAtIndex","outputs":[{"internalType":"struct IStakeRegistry.StakeUpdate","name":"","type":"tuple","components":[{"internalType":"uint32","name":"updateBlockNumber","type":"uint32"},{"internalType":"uint32","name":"nextUpdateBlockNumber","type":"uint32"},{"internalType":"uint96","name":"stake","type":"uint96"}]}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint96","name":"minimumStake","type":"uint96"},{"internalType":"struct IStakeRegistry.StrategyParams[]","name":"strategyParams","type":"tuple[]","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}]}],"stateMutability":"nonpayable","type":"function","name":"initializeQuorum"},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"minimumStakeForQuorum","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint256[]","name":"strategyIndices","type":"uint256[]"},{"internalType":"uint96[]","name":"newMultipliers","type":"uint96[]"}],"stateMutability":"nonpayable","type":"function","name":"modifyStrategyParams"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bytes32","name":"operatorId","type":"bytes32"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerOperator","outputs":[{"internalType":"uint96[]","name":"","type":"uint96[]"},{"internalType":"uint96[]","name":"","type":"uint96[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"registryCoordinator","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint256[]","name":"indicesToRemove","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"removeStrategies"},{"inputs":[{"internalType":"uint192","name":"newValue","type":"uint192"}],"stateMutability":"nonpayable","type":"function","name":"set_updateOperatorStakeReturnBitmap"},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"strategyParamsByIndex","outputs":[{"internalType":"struct IStakeRegistry.StrategyParams","name":"","type":"tuple","components":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint96","name":"multiplier","type":"uint96"}]}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"}],"stateMutability":"view","type":"function","name":"strategyParamsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"updateOperatorStake","outputs":[{"internalType":"uint192","name":"","type":"uint192"}]},{"inputs":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"weightOfOperatorForQuorum","outputs":[{"internalType":"uint96","name":"","type":"uint96"}]}],"devdoc":{"kind":"dev","methods":{"deregisterOperator(bytes32,bytes)":{"details":"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for","params":{"operatorId":"The id of the operator to deregister.","quorumNumbers":"The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber."}},"getCurrentStake(bytes32,uint8)":{"details":"Function returns weight of **0** in the event that the operator has no stake history"},"getCurrentTotalStake(uint8)":{"details":"Will revert if `_totalStakeHistory[quorumNumber]` is empty."},"getLatestStakeUpdate(bytes32,uint8)":{"details":"Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history"},"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)":{"details":"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators","params":{"blockNumber":"Block number to make sure the stake is from.","index":"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.","operatorId":"The id of the operator of interest.","quorumNumber":"The quorum number to get the stake for."}},"getStakeHistory(bytes32,uint8)":{"params":{"operatorId":"The id of the operator of interest.","quorumNumber":"The quorum number to get the stake for."}},"getStakeUpdateAtIndex(uint8,bytes32,uint256)":{"details":"Function will revert if `index` is out-of-bounds.","params":{"index":"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.","operatorId":"The id of the operator of interest.","quorumNumber":"The quorum number to get the stake for."}},"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)":{"details":"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators","params":{"blockNumber":"Block number to make sure the stake is from.","index":"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.","quorumNumber":"The quorum number to get the stake for."}},"getTotalStakeUpdateAtIndex(uint8,uint256)":{"params":{"index":"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.","quorumNumber":"The quorum number to get the stake for."}},"modifyStrategyParams(uint8,uint256[],uint96[])":{"params":{"newMultipliers":"are the new multipliers for the strategies","quorumNumber":"is the quorum number to change the strategy for","strategyIndices":"are the indices of the strategies to change"}},"registerOperator(address,bytes32,bytes)":{"details":"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered","params":{"operator":"The address of the operator to register.","operatorId":"The id of the operator to register.","quorumNumbers":"The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber."},"returns":{"_0":"The operator's current stake for each quorum, and the total stake for each quorum"}},"removeStrategies(uint8,uint256[])":{"details":"higher indices should be *first* in the list of @param indicesToRemove, since otherwise the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove","params":{"quorumNumber":"."}},"weightOfOperatorForQuorum(uint8,address)":{"details":"reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`"}},"version":1},"userdoc":{"kind":"user","methods":{"WEIGHTING_DIVISOR()":{"notice":"Constant used as a divisor in calculating weights."},"addStrategies(uint8,(address,uint96)[])":{"notice":"Adds new strategies and the associated multipliers to the @param quorumNumber."},"delegation()":{"notice":"Returns the EigenLayer delegation manager contract."},"deregisterOperator(bytes32,bytes)":{"notice":"Deregisters the operator with `operatorId` for the specified `quorumNumbers`."},"getCurrentStake(bytes32,uint8)":{"notice":"Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`"},"getCurrentTotalStake(uint8)":{"notice":"Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`."},"getLatestStakeUpdate(bytes32,uint8)":{"notice":"Returns the most recent stake weight for the `operatorId` for a certain quorum"},"getStakeAtBlockNumber(bytes32,uint8,uint32)":{"notice":"Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`"},"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)":{"notice":"Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry  corresponds to the operator's stake at `blockNumber`. Reverts otherwise."},"getStakeHistory(bytes32,uint8)":{"notice":"Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array."},"getStakeUpdateAtIndex(uint8,bytes32,uint256)":{"notice":"Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array."},"getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)":{"notice":"Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`"},"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)":{"notice":"Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the  `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`.  Reverts otherwise."},"getTotalStakeIndicesAtBlockNumber(uint32,bytes)":{"notice":"Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`"},"getTotalStakeUpdateAtIndex(uint8,uint256)":{"notice":"Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`."},"initializeQuorum(uint8,uint96,(address,uint96)[])":{"notice":"Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake"},"minimumStakeForQuorum(uint8)":{"notice":"In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`"},"modifyStrategyParams(uint8,uint256[],uint96[])":{"notice":"This function is used for modifying the weights of strategies that are already in the mapping strategiesConsideredAndMultipliers for a specific"},"registerOperator(address,bytes32,bytes)":{"notice":"Registers the `operator` with `operatorId` for the specified `quorumNumbers`."},"removeStrategies(uint8,uint256[])":{"notice":"This function is used for removing strategies and their associated weights from the"},"strategyParamsByIndex(uint8,uint256)":{"notice":"Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`"},"strategyParamsLength(uint8)":{"notice":"Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`."},"updateOperatorStake(address,bytes32,bytes)":{"notice":"Called by the registry coordinator to update an operator's stake for one or more quorums. If the operator no longer has the minimum stake required for a quorum, they are added to the"},"weightOfOperatorForQuorum(uint8,address)":{"notice":"This function computes the total weight of the @param operator in the quorum @param quorumNumber."}},"version":1}},"settings":{"remappings":["@openzeppelin-upgrades-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/","@openzeppelin-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","@openzeppelin/=lib/openzeppelin-contracts/","ds-test/=lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-contracts/","erc4626-tests/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts-v4.9.0/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-v4.9.0/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"test/mocks/StakeRegistryMock.sol":"StakeRegistryMock"},"evmVersion":"london","libraries":{}},"sources":{"lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol":{"keccak256":"0x5a7dd74fb8a9334aa50c497a58875159aec17e905a7daaf3c276936d5b691bd1","urls":["bzz-raw://a25b8d80233016a4634b9217a0899f43f18bfb21abb046bee4403e9408296009","dweb:/ipfs/QmUA3bTzddiHnPxBqYtovxvcVvCkNrAxPJ7xcskocxEq5P"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol":{"keccak256":"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4","urls":["bzz-raw://b59a96fbf9940a7795d9a5fcb9e03939a87216317fb67872b7017285bf7eb49b","dweb:/ipfs/QmdiH5AfYBvuTpzxTqfhorLG25t2dhSTKWh1cvBbYxGDJH"],"license":"BUSL-1.1"},"lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol":{"keccak256":"0x816aaa02d489535da4f4103a5df5444307487d3121eda4be0a1bd8e7c0f7cdf9","urls":["bzz-raw://54f58369f286eaa6d2ab3c6b8250774b1de46c9935d4af09518bbdeec08a906e","dweb:/ipfs/QmZPmSTAu4fmR7TeBijDTYNM2bsv5DHh9H8gtyP7Ap1DwE"],"license":"BUSL-1.1"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b","urls":["bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34","dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"],"license":"MIT"},"src/interfaces/IBLSApkRegistry.sol":{"keccak256":"0xc07a5edfd95ab4f16f16a8dc8e76eadf4b0e90fe49db90540d01daaad86898c5","urls":["bzz-raw://52b53266450a53da641e82d8ae3be93c5e09f8342b4ea0cc96bb9038d8406354","dweb:/ipfs/QmVuoiQyqPTLCGnyt8zDaxiyaj4ETdgTGKv4MDHWzqEDjp"],"license":"BUSL-1.1"},"src/interfaces/IIndexRegistry.sol":{"keccak256":"0x83b2d56aacf27e65c4959a832c5de573e013908c044f6e48ea8284ac5282ae2b","urls":["bzz-raw://877af382587e96bb39bcc6db8bb5e4b871db5025c52347d4bee9afeaa4a6cc8d","dweb:/ipfs/QmdnhsQCChzq2o5NgbeT3JxSsEcMm1PC9QW6zenZNPjD9F"],"license":"BUSL-1.1"},"src/interfaces/IRegistry.sol":{"keccak256":"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3","urls":["bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25","dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY"],"license":"BUSL-1.1"},"src/interfaces/IRegistryCoordinator.sol":{"keccak256":"0xdd8effb082c1d5957d5ff43d7c59497b32866a6d82bcc7d5efa49ea9bc9b3385","urls":["bzz-raw://cb33a2a1446585b13b7a509e880c60d658d2d2522ec48a9f02e30d2cff54002d","dweb:/ipfs/QmVNG8ZPZkXzNEadPdTj1uBYLiZdCnYfsE5iGU6nJcJXiD"],"license":"BUSL-1.1"},"src/interfaces/IStakeRegistry.sol":{"keccak256":"0x1b8b4d757c1b804bc4cf6fbbf8bf8f89ebdeb30a31014751fe7d01deb9d513d4","urls":["bzz-raw://984bf2777b898ed187d28997f9783f5c293a1a1848e3e9aa470ce9183d454c97","dweb:/ipfs/Qme3aTpBrkLu8wYHFMZbCfhXHoZ1M6SpXkeC237T9BuU5B"],"license":"BUSL-1.1"},"src/libraries/BN254.sol":{"keccak256":"0xb428c8d0c3b325507a88a61a80115493eb88606ccc19ed64a31e11294ab853b3","urls":["bzz-raw://d7b6fb935bfe0494e6ff970c8f30a86d5f4cf5c3e0967300c28cd383c043acae","dweb:/ipfs/QmUHfFZaVjLPXhkBmcxrZhAHZaSFQDqXtrLGpjGBQBa5Ki"],"license":"MIT"},"test/mocks/StakeRegistryMock.sol":{"keccak256":"0x7e6641dceef1f8b564d80e01930a9a51ac78711bc2c0a1628bd56e99c7b193be","urls":["bzz-raw://7b473cf6c9895888069b045e204cd12bc31c1c750e9ae270bc02b379597050d1","dweb:/ipfs/QmcLg6DKHs8QU5kp6H6xFnH35URFPD8S3z5ZoY9mWEWZHh"],"license":"BUSL-1.1"}},"version":1},"id":163}